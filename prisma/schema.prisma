// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  role             String
  contactNumber    String
  password         String
  address          String?
  profileImage     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  houses           House[]
  reviewAndRatings ReviewAndRating[]
  bookedHouses     BookedHouse[]
  Feedback         Feedback[]
  Blog             Blog[]
  addToCart        AddToCart[]
  faqs             Faq[]
  HouseVisit       HouseVisit[]

  @@map("users")
}

model Admin {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  role          RoleStatus
  contactNumber String
  password      String
  profileImage  String?
  address       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("admins")
}

model HouseOwner {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  role          RoleStatus
  contactNumber String
  password      String
  profileImage  String?
  address       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("house_owners")
}

model HouseRenter {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  role          RoleStatus
  contactNumber String
  password      String
  profileImage  String?
  address       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("house_renters")
}

model House {
  id              String   @id @default(uuid())
  propertyId      String
  name            String
  address         String
  city            String
  bedrooms        Int
  roomSize        String
  numberOfBalcony Int
  parking         Int
  yearBuilt       Int
  houseImage      String[] @default([])

  gas          GasStatus
  propertyType PropertyTypeStatus
  interior     InteriorStatus
  status       AvailabelStatus    @default(AVAILABLE)

  rentPerMonth String
  description  String
  ownerId      String
  owner        User   @relation(fields: [ownerId], references: [id])

  availabilityDate DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ReviewAndRating  ReviewAndRating[]
  bookedHouse      BookedHouse?
  addToCart        AddToCart[]
  visits           HouseVisit[]

  @@map("houses")
}

model ReviewAndRating {
  id      String @id @default(uuid())
  review  String
  rating  Float
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  houseId String
  house   House  @relation(fields: [houseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_ratings")
}

model BookedHouse {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  houseId String @unique
  house   House  @relation(fields: [houseId], references: [id])

  //have to add booking time

  bookingStatus Status @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("booked_houses")
}

//bookingSchedule 
model HouseVisit {
  id        String    @id @default(uuid())
  visitDate String
  visitSlot VisitSlot
  visitorId String
  visitor   User      @relation(fields: [visitorId], references: [id])
  house     House     @relation(fields: [houseId], references: [id])
  houseId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("house_visits")
}

//add to cart
model AddToCart {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  houseId   String
  house     House    @relation(fields: [houseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("add_to_cart")
}

//feedback
model Feedback {
  id String @id @default(uuid())

  feedback String
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

model Blog {
  id String @id @default(uuid())

  title     String
  blog      String
  blogImage String?
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Faq {
  id       String @id @default(uuid())
  question String
  answer   String
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

enum AvailabelStatus {
  AVAILABLE
  BOOKED
}

enum InteriorStatus {
  Furnished
  Un_Furnished
}

enum PropertyTypeStatus {
  Furnished
  Residential
  Luxury
}

enum GasStatus {
  LPG
  Govt
}

enum RoleStatus {
  admin
  house_owner
  house_renter
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum VisitSlot {
  MORNING
  NOON
  EVENING
}
